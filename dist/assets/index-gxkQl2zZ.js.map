{"version":3,"file":"index-gxkQl2zZ.js","sources":["../../public/js/script.js"],"sourcesContent":["import * as THREE from 'https://unpkg.com/three/build/three.module.js';\nimport { gsap } from \"https://cdn.skypack.dev/gsap\";\nimport { ScrollTrigger } from \"https://cdn.skypack.dev/gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\n// Canvas and Scene Setup\nconst canvas = document.querySelector('canvas.webgl');\nconst scene = new THREE.Scene();\n\n// Parameters for the galaxy\nconst parameters = {\n    count: 400000,\n    size: 0.005,\n    radius: 8,\n    branches: 5,\n    spin: 1,\n    randomness: 0.3,\n    randomnessPower: 3,\n    insideColor: '#ff6030',\n    outsideColor: '#1b3984'\n};\n\nlet geometry = null;\nlet material = null;\nlet points = null;\n\nconst generateGalaxy = () => {\n    if (points !== null) {\n        geometry.dispose();\n        material.dispose();\n        scene.remove(points);\n    }\n\n    geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(parameters.count * 3);\n    const colors = new Float32Array(parameters.count * 3);\n\n    const insideColor = new THREE.Color(parameters.insideColor);\n    const outsideColor = new THREE.Color(parameters.outsideColor);\n\n    for (let i = 0; i < parameters.count; i++) {\n        const i3 = i * 3;\n        const radius = Math.random() * parameters.radius;\n        const branchAngle = (i % parameters.branches) / parameters.branches * Math.PI * 2;\n        const spinAngle = radius * parameters.spin;\n\n        const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness * radius;\n        const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness * radius;\n        const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1) * parameters.randomness * radius;\n\n        positions[i3] = Math.cos(branchAngle + spinAngle) * radius + randomX;\n        positions[i3 + 1] = randomY;\n        positions[i3 + 2] = Math.sin(branchAngle + spinAngle) * radius + randomZ;\n\n        const mixedColor = insideColor.clone();\n        mixedColor.lerp(outsideColor, radius / parameters.radius);\n\n        colors[i3] = mixedColor.r;\n        colors[i3 + 1] = mixedColor.g;\n        colors[i3 + 2] = mixedColor.b;\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    material = new THREE.PointsMaterial({\n        size: parameters.size,\n        sizeAttenuation: true,\n        depthWrite: false,\n        blending: THREE.AdditiveBlending,\n        vertexColors: true\n    });\n\n    points = new THREE.Points(geometry, material);\n    scene.add(points);\n};\n\ngenerateGalaxy();\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\ncamera.position.set(5, 0, 9); // Initial position\ncamera.lookAt(0, 0, 0); // Ensure the galaxy center is always in view\nscene.add(camera);\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Handle window resizing properly\nwindow.addEventListener('resize', () => {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n});\n\n\n// Define Camera Settings for Sections\n\n\n// Smoothly update camera settings\n\nconst updateCamera = (settings) => {\n    gsap.to(camera.position, {\n        x: settings.position.x,\n        y: settings.position.y,\n        z: settings.position.z,\n        duration: 1\n        \n    });\n    gsap.to(camera, {\n        fov: settings.fov,\n        duration: 1,\n        onUpdate: () => camera.updateProjectionMatrix()\n    });\n};\n\n// Scroll Event Listener\nwindow.addEventListener('scroll', () => {\n    const scrollY = window.scrollY;\n    const maxScroll = document.body.scrollHeight - window.innerHeight;\n\n    // Calculate the current section based on scroll position\n    const sectionIndex = Math.min(\n        Math.floor((scrollY / maxScroll) * sectionCameraSettings.length),\n        sectionCameraSettings.length - 1\n    );\n\n    // Update camera smoothly\n    updateCamera(sectionCameraSettings[sectionIndex]);\n});\n\n// Animation Loop\nconst clock = new THREE.Clock();\n\nconst animate = () => {\n    const elapsedTime = clock.getElapsedTime();\n\n    // Rotate galaxy slightly for a continuous effect\n    points.rotation.y += 0.001;\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n    \n};\n\nanimate();\n// Resize Handling\nwindow.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n"],"names":["gsap","ScrollTrigger","canvas","scene","THREE","parameters","geometry","material","points","generateGalaxy","positions","colors","insideColor","outsideColor","i","i3","radius","branchAngle","spinAngle","randomX","randomY","randomZ","mixedColor","camera","renderer","updateCamera","settings","scrollY","maxScroll","sectionIndex","clock","animate"],"mappings":"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"}